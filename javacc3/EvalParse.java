/* Generated By:JavaCC: Do not edit this line. EvalParse.java */
public class EvalParse implements EvalParseConstants {

  static final public Stm parse() throws ParseException {
                 Stm a ;
    a = Stm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITTI:
      jj_consume_token(BITTI);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                            {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Stm Stm() throws ParseException {
               Stm a1,a2 ;
    a1 = Stm2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      a2 = Stm();
                                      a1 = new CStm(a1,a2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
          {if (true) return a1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stm Stm2() throws ParseException {
                Token id ; Exp e ; ExpList el ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      e = exper();
                                            {if (true) return new AStm(id.image, e);}
      break;
    case YAZDIR:
      jj_consume_token(YAZDIR);
      jj_consume_token(LPR);
      el = ExpList();
      jj_consume_token(RPR);
                                                {if (true) return new PStm(el);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp exper() throws ParseException {
                 Exp a , b ;
    a = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = term();
                                      a = new Plus(a, b) ;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = term();
                                       a = new Minus(a, b) ;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp term() throws ParseException {
                Exp a ,b ;
    a = unary();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        b = unary();
                                         a= new Times(a,b);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = unary();
                                         a= new Divide(a,b);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp unary() throws ParseException {
                 Exp a ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      a = power();
                               {if (true) return a;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      a = power();
                                {if (true) return ( new Times( new Num(-1),a)) ;}
      break;
    case NUMBER:
    case EXP:
    case LOG:
    case SQRT:
    case SIN:
    case COS:
    case MAX:
    case MIN:
    case X:
    case ID:
    case LPR:
      a = power();
                        {if (true) return a;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp power() throws ParseException {
                Exp a,b ;
    a = element();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
      jj_consume_token(POWER);
      b = power();
                                              a = new Power(a,b);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp element() throws ParseException {
                  Token id, t ; Exp a,b ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
                      {if (true) return new Id(id.image);}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                        {if (true) return (new Num(Double.parseDouble(t.image)));}
      break;
    case X:
      jj_consume_token(X);
                {if (true) return (new Var());}
      break;
    case LPR:
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                          {if (true) return a;}
      break;
    case EXP:
      jj_consume_token(EXP);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                          {if (true) return (new Euler(a));}
      break;
    case LOG:
      jj_consume_token(LOG);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                          {if (true) return (new Log(a));}
      break;
    case SQRT:
      jj_consume_token(SQRT);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                           {if (true) return (new Sqrt(a));}
      break;
    case SIN:
      jj_consume_token(SIN);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                          {if (true) return (new Sin(a));}
      break;
    case COS:
      jj_consume_token(COS);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(RPR);
                                          {if (true) return (new Cos(a));}
      break;
    case MAX:
      jj_consume_token(MAX);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(COM);
      b = exper();
      jj_consume_token(RPR);
                                                           {if (true) return (new Max(a,b));}
      break;
    case MIN:
      jj_consume_token(MIN);
      jj_consume_token(LPR);
      a = exper();
      jj_consume_token(COM);
      b = exper();
      jj_consume_token(RPR);
                                                           {if (true) return (new Min(a,b));}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
  Exp e; ExpList el;
    e = exper();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COM:
      jj_consume_token(COM);
      el = ExpList();
                                    {if (true) return new PList(e, el);}
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return new LList(e);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public EvalParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x21,0x10,0x200080,0x300,0x300,0xc00,0xc00,0xbfe308,0x1000,0xbfe008,0x400000,};
   }

  public EvalParse(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvalParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public EvalParse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvalParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public EvalParse(EvalParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(EvalParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
